var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.119,1,2.251]],["body/controllers/AppController.html",[0,1.808,1,3.637,2,1.454,3,0.363,4,0.32,5,0.32,6,3.712,7,0.551,8,2.075,9,5.255,10,1.186,11,0.026,12,0.77,13,4.396,14,1.669,15,1.808,16,0.451,17,0.962,18,3.292,19,3.712,20,0.363,21,0.016,22,2.433,23,1.791,24,1.669,25,4.396,26,0.021,27,0.021]],["title/modules/AppModule.html",[28,1.119,29,2.251]],["body/modules/AppModule.html",[1,3.073,2,1.294,3,0.222,4,0.195,5,0.195,11,0.027,16,0.528,17,0.587,18,3.118,19,2.266,20,0.222,21,0.01,26,0.015,27,0.015,28,1.528,29,4.347,30,1.713,31,1.175,32,1.368,33,1.368,34,1.175,35,2.355,36,1.368,37,2.266,38,2.266,39,2.266,40,3.118,41,3.405,42,3.405,43,3.118,44,2.873,45,1.995,46,1.368,47,1.266,48,1.991,49,2.556,50,3.304,51,4.286,52,1.785,53,1.621,54,1.093,55,2.683,56,2.683,57,3.913,58,2.683,59,3.913,60,2.683,61,3.913,62,2.683,63,1.991,64,1.785,65,2.683,66,2.683,67,2.683,68,2.683,69,1.594,70,2.683,71,1.621,72,3.427,73,2.266,74,2.683,75,2.683,76,1.266,77,3.913,78,2.683,79,2.683,80,2.683,81,2.683,82,2.683,83,1.991,84,2.683,85,0.47,86,2.683,87,1.485,88,2.683,89,2.683,90,2.683,91,2.683,92,2.683,93,2.683,94,2.683,95,2.683,96,1.785,97,2.683,98,2.683,99,2.683,100,2.683,101,2.683]],["title/injectables/AppService.html",[18,1.872,102,1.119]],["body/injectables/AppService.html",[3,0.38,4,0.335,5,0.335,7,0.577,8,2.134,9,5.338,11,0.026,12,0.806,14,1.746,15,1.859,16,0.38,17,1.006,18,3.11,20,0.38,21,0.017,24,1.746,26,0.022,27,0.022,102,1.859,103,2.345,104,3.884,105,4.599,106,4.599,107,4.599]],["title/controllers/AuthController.html",[0,1.119,108,2.251]],["body/controllers/AuthController.html",[0,1.561,2,1.561,3,0.39,4,0.343,5,0.343,11,0.026,16,0.471,17,1.032,20,0.39,21,0.018,22,2.611,23,1.922,26,0.022,27,0.022,108,3.798,109,3.984,110,2.851,111,4.718,112,3.129,113,3.984,114,4.718]],["title/modules/AuthModule.html",[28,1.119,40,1.872]],["body/modules/AuthModule.html",[2,1.678,3,0.323,4,0.284,5,0.284,11,0.026,16,0.492,17,0.855,20,0.323,21,0.015,26,0.019,27,0.019,28,1.863,30,1.712,31,1.712,32,1.993,33,1.993,34,1.712,35,2.871,36,2.871,40,3.566,44,2.587,45,2.587,46,1.993,47,1.844,49,2.164,108,3.748,112,3.44,113,3.301,115,3.301,116,3.301,117,3.301,118,3.91,119,3.376,120,3.91,121,3.301]],["title/injectables/AuthService.html",[102,1.119,112,1.724]],["body/injectables/AuthService.html",[3,0.292,4,0.257,5,0.257,7,0.443,8,1.801,11,0.026,12,0.939,14,1.801,15,2.079,16,0.392,17,0.773,20,0.292,21,0.013,23,1.438,24,1.801,26,0.018,27,0.018,69,1.438,71,2.134,76,1.666,83,2.62,85,0.831,96,3.564,102,1.569,103,1.8,112,2.418,119,2.35,122,2.982,123,2.693,124,4.836,125,4.744,126,2.867,127,2.982,128,2.965,129,3.531,130,2.077,131,1.801,132,1.569,133,3.531,134,3.531,135,4.744,136,1.772,137,1.445,138,3.531,139,2.35,140,2.982,141,2.982,142,2.134,143,3.531,144,3.531,145,3.531]],["title/classes/CreatePostDto.html",[21,0.013,146,1.872]],["body/classes/CreatePostDto.html",[3,0.134,4,0.118,5,0.118,7,0.203,10,1.482,11,0.026,12,0.963,15,1.818,16,0.378,20,0.134,21,0.013,26,0.01,27,0.01,76,2.161,85,1.079,132,1.855,137,1.045,146,1.464,147,0.709,148,4.734,149,1.202,150,1.11,151,3.354,152,3.869,153,2.232,154,2.489,155,3.741,156,2.833,157,2.232,158,2.841,159,2.841,160,2.58,161,3.869,162,1.62,163,2.646,164,3.27,165,3.721,166,1.62,167,1.62,168,3.605,169,1.695,170,1.62,171,1.62,172,2.646,173,3.869,174,1.62,175,1.62,176,2.143,177,2.646,178,1.62,179,4.269,180,1.464,181,2.646,182,1.62,183,1.62,184,1.62,185,2.646,186,2.324,187,1.62,188,2.874,189,2.646,190,1.62,191,1.62,192,2.577,193,2.646,194,2.646,195,2.646,196,1.62,197,1.62,198,2.646,199,3.27,200,2.646,201,2.646,202,1.62,203,1.62,204,1.62,205,1.368,206,2.234,207,1.62,208,3.27,209,3.27,210,2.234,211,2.234,212,2.234,213,2.234,214,2.234,215,1.62,216,3.167,217,1.62,218,1.62,219,2.646,220,2.646,221,1.62,222,1.62,223,1.62,224,1.62,225,1.62,226,3.399,227,3.587,228,0.826,229,1.078,230,2.646,231,1.62,232,2.232,233,2.646,234,1.963,235,2.768,236,2.921,237,2.874,238,2.234,239,1.202,240,1.202,241,1.368,242,2.646,243,0.764,244,0.66,245,1.078,246,0.709,247,1.202,248,1.368,249,1.368,250,1.62,251,1.62,252,2.234,253,1.963,254,1.62,255,1.368,256,1.368,257,1.62,258,2.646,259,1.62,260,1.62,261,1.62,262,1.62,263,2.234,264,1.62,265,2.646,266,1.963,267,1.62]],["title/classes/CreatePostMetaOptionDto.html",[21,0.013,176,1.872]],["body/classes/CreatePostMetaOptionDto.html",[3,0.37,4,0.326,5,0.326,7,0.563,10,1.21,11,0.026,12,0.786,15,1.831,16,0.37,20,0.37,21,0.021,26,0.021,27,0.021,85,0.786,147,1.964,150,1.831,176,3.063,234,4.107,235,3.345,243,2.116,244,2.255,245,3.683,246,2.423,266,4.454,268,3.788,269,4.486,270,4.486]],["title/classes/CreateUserDto.html",[21,0.013,271,1.872]],["body/classes/CreateUserDto.html",[3,0.271,4,0.239,5,0.239,7,0.412,10,1.499,11,0.026,12,0.974,15,2.079,16,0.271,20,0.271,21,0.017,26,0.017,27,0.017,85,0.974,96,3.435,132,1.495,137,1.219,139,3.435,147,1.439,150,1.495,188,3.352,235,3.36,236,2.73,237,4.324,239,2.439,240,2.439,241,2.776,243,1.551,271,2.501,272,4.921,273,2.439,274,3.831,275,4.36,276,3.287,277,3.287,278,3.287,279,3.287,280,3.287,281,3.287,282,3.287,283,5.559,284,4.519,285,4.519,286,4.519,287,4.519,288,4.519,289,6.022,290,4.519,291,4.519,292,4.519,293,3.287,294,4.519,295,4.519,296,5.559,297,3.287,298,3.287]],["title/classes/GetUserParamsDto.html",[21,0.013,299,2.044]],["body/classes/GetUserParamsDto.html",[3,0.336,4,0.296,5,0.296,7,0.51,10,1.098,11,0.026,12,0.713,16,0.474,20,0.336,21,0.021,26,0.02,27,0.02,69,2.465,85,1.006,132,1.722,136,2.069,137,1.548,147,1.782,150,1.722,165,3.146,168,3.436,186,1.658,227,3.863,228,2.075,229,2.708,232,3.464,236,3.146,243,1.92,299,3.146,300,4.396,301,3.436,302,4.069,303,4.069,304,4.069]],["title/entities/MetaOption.html",[305,1.481,306,1.595]],["body/entities/MetaOption.html",[3,0.276,4,0.243,5,0.243,7,0.419,10,1.58,11,0.026,12,1.027,15,1.51,16,0.377,20,0.276,21,0.012,26,0.017,27,0.017,85,1.06,87,1.847,136,1.722,137,1.231,150,1.51,169,1.847,180,2.527,192,3.723,199,3.855,244,2.464,266,3.861,305,1.999,306,2.154,307,2.818,308,4.394,309,4.394,310,4.394,311,3.338,312,3.463,313,3.338,314,2.221,315,3.038,316,3.338,317,2.818,318,4.566,319,3.855,320,3.338,321,3.338,322,4.394,323,3.338,324,2.476,325,3.038,326,4.566,327,3.855,328,1.461,329,2.476]],["title/controllers/MetaOptionsController.html",[0,1.119,330,2.251]],["body/controllers/MetaOptionsController.html",[0,1.293,2,1.293,3,0.323,4,0.284,5,0.284,7,0.49,8,1.926,10,1.054,11,0.026,12,0.685,14,1.484,16,0.465,17,0.855,20,0.323,21,0.015,22,2.164,23,1.593,24,1.484,26,0.019,27,0.019,63,2.901,64,3.376,85,0.685,110,2.363,123,2.466,130,1.712,131,1.484,132,1.293,169,1.626,176,3.299,244,2.067,246,1.712,247,2.901,330,3.376,331,3.301,332,5.073,333,5.073,334,3.91,335,3.91,336,4.284,337,1.993,338,2.808,339,3.301,340,3.301,341,2.363,342,3.91,343,3.91,344,3.91,345,3.91]],["title/modules/MetaOptionsModule.html",[28,1.119,41,2.044]],["body/modules/MetaOptionsModule.html",[2,1.698,3,0.329,4,0.29,5,0.29,11,0.026,16,0.513,17,0.871,20,0.329,21,0.015,26,0.02,27,0.02,28,1.879,30,1.743,31,1.743,32,2.029,33,2.029,34,1.743,35,2.896,36,2.029,41,3.843,45,2.617,46,2.029,47,1.878,49,2.203,53,2.406,54,1.622,63,2.953,64,2.649,244,1.622,306,1.878,330,3.78,338,3.52,339,3.361,340,3.361,346,3.361,347,3.361,348,3.981,349,3.981,350,3.361,351,3.981]],["title/injectables/MetaOptionsService.html",[102,1.119,338,1.872]],["body/injectables/MetaOptionsService.html",[3,0.295,4,0.26,5,0.26,7,0.449,8,1.817,11,0.026,12,0.839,14,1.358,16,0.496,17,0.783,20,0.295,21,0.013,24,1.358,26,0.018,27,0.018,54,1.457,85,0.839,102,1.583,103,1.824,123,2.361,126,2.892,130,2.095,131,1.817,132,1.583,142,2.162,176,3.186,244,2.345,245,2.38,246,1.566,247,2.654,306,1.688,328,1.566,336,3.021,338,2.648,350,3.021,352,4.553,353,3.021,354,3.258,355,2.648,356,3.577,357,3.479,358,3.577,359,4.041,360,4.785,361,3.577,362,2.162,363,2.38,364,3.021,365,5.392,366,3.577,367,2.162,368,3.577]],["title/classes/PatchPostDto.html",[21,0.013,369,2.044]],["body/classes/PatchPostDto.html",[3,0.344,4,0.303,5,0.303,7,0.522,10,1.123,11,0.026,12,0.729,16,0.479,20,0.344,21,0.02,26,0.02,27,0.02,85,0.729,136,2.018,137,1.424,146,2.303,147,1.822,150,1.747,169,1.525,186,1.696,205,3.515,226,3.919,228,2.122,232,3.514,235,3.191,243,1.963,355,2.303,369,3.191,370,4.46,371,3.515,372,4.46,373,5.281,374,4.162,375,4.162,376,3.515,377,3.088]],["title/classes/PatchUserDto.html",[21,0.013,378,2.251]],["body/classes/PatchUserDto.html",[3,0.393,4,0.346,5,0.346,11,0.026,16,0.474,20,0.393,21,0.018,26,0.022,27,0.022,147,2.084,253,3.531,271,2.634,273,3.531,355,2.634,372,4.845,376,4.019,378,3.818,379,4.019,380,5.738,381,4.019,382,3.531]],["title/entities/Post.html",[169,0.977,305,1.481]],["body/entities/Post.html",[3,0.162,4,0.143,5,0.143,7,0.246,10,1.592,11,0.027,12,1.035,15,1.884,16,0.412,20,0.162,21,0.007,26,0.012,27,0.012,69,2.034,76,2.891,85,1.116,87,1.086,132,1.431,136,1.262,137,0.832,150,1.021,152,3.221,153,2.538,154,2.83,155,4.014,156,3.221,157,2.538,158,2.538,159,2.538,160,2.305,161,3.221,169,0.891,180,2.994,192,2.053,216,3.488,244,0.799,248,1.657,249,1.657,252,4.568,305,1.351,306,2.355,312,2.538,314,3.6,315,4.117,317,1.657,325,3.703,327,2.606,328,0.859,329,2.289,383,1.657,384,2.538,385,1.962,386,3.086,387,1.962,388,3.652,389,1.962,390,3.704,391,3.704,392,2.606,393,1.962,394,1.962,395,3.086,396,3.814,397,1.962,398,3.652,399,3.086,400,1.962,401,3.086,402,1.962,403,1.962,404,2.606,405,2.289,406,1.962,407,1.962,408,2.763,409,1.657,410,1.962,411,1.962,412,3.086,413,1.962,414,1.456,415,1.962,416,1.962,417,3.086,418,2.606,419,3.086,420,1.962,421,1.962,422,1.962,423,1.962,424,1.962,425,1.962,426,1.962]],["title/controllers/PostsController.html",[0,1.119,427,2.251]],["body/controllers/PostsController.html",[0,0.864,2,0.864,3,0.216,4,0.19,5,0.19,7,0.328,8,1.457,10,1.352,11,0.026,12,0.878,14,1.903,15,1.505,16,0.441,17,0.572,20,0.216,21,0.01,22,1.446,23,1.064,24,1.903,26,0.015,27,0.015,85,0.878,110,1.579,123,2.757,130,2.195,131,1.903,132,1.658,136,1.269,137,1.227,146,2.774,159,1.739,169,1.542,186,1.563,206,3.24,228,1.332,246,1.144,337,1.332,341,1.579,354,2.748,355,2.124,362,1.579,367,1.579,369,3.373,377,1.939,427,2.553,428,2.206,429,3.24,430,3.837,431,3.837,432,3.837,433,2.613,434,2.613,435,2.847,436,2.613,437,5.012,438,3.24,439,2.613,440,2.613,441,3.24,442,2.613,443,3.026,444,2.613,445,2.613,446,3.837,447,2.613,448,3.24,449,2.613,450,2.613,451,3.24,452,3.837,453,2.613,454,1.939,455,2.847,456,3.24,457,1.939,458,2.517,459,2.206,460,3.841,461,3.24,462,2.206,463,1.939,464,2.206,465,2.613,466,2.613,467,2.613,468,2.613,469,3.24,470,2.613,471,2.206,472,2.613,473,2.613,474,2.613,475,2.613,476,2.613,477,2.613]],["title/modules/PostsModule.html",[28,1.119,42,2.044]],["body/modules/PostsModule.html",[2,1.576,3,0.294,4,0.259,5,0.259,11,0.027,16,0.528,17,0.778,20,0.294,21,0.013,26,0.018,27,0.018,28,1.778,30,1.556,31,1.556,32,1.812,33,1.812,34,1.556,35,2.74,36,1.812,42,3.957,43,3.411,44,3.142,45,2.429,46,1.812,47,1.677,49,2.637,53,2.148,54,1.448,121,3.001,169,1.026,244,1.448,306,2.247,414,2.637,427,3.576,458,3.411,459,3.001,478,3.001,479,3.554,480,3.001,481,3.554,482,3.554,483,3.001,484,3.554,485,3.554]],["title/injectables/PostsService.html",[102,1.119,458,1.872]],["body/injectables/PostsService.html",[3,0.173,4,0.153,5,0.153,7,0.263,8,1.234,11,0.027,12,0.85,14,1.702,15,1.317,16,0.469,17,0.459,20,0.173,21,0.008,23,1.324,24,1.702,26,0.012,27,0.012,54,0.854,71,3.102,76,2.115,85,0.85,102,1.075,103,1.069,123,2.628,126,1.964,127,1.771,128,2.421,130,2.124,131,1.842,132,1.605,136,1.317,137,1.074,140,1.771,142,2.709,146,2.481,154,1.556,160,3.102,169,0.939,244,0.854,246,1.423,306,0.989,328,0.918,337,1.069,341,1.267,354,3.626,357,3.235,359,3.361,362,2.709,363,1.396,364,1.771,367,3.235,369,2.932,377,1.556,384,2.163,414,1.556,429,2.745,441,1.771,443,2.163,448,1.771,451,2.745,458,1.799,463,1.556,464,1.771,471,1.771,483,1.771,486,1.771,487,2.745,488,2.73,489,3.98,490,2.097,491,2.097,492,2.097,493,3.98,494,2.745,495,2.097,496,3.251,497,2.097,498,3.251,499,2.097,500,2.097,501,2.097,502,2.097,503,2.745,504,2.097,505,2.097,506,2.097,507,2.097,508,2.097,509,2.097,510,1.771,511,2.097,512,2.097,513,2.097,514,3.251,515,2.097,516,3.251,517,2.097,518,3.251,519,2.097,520,3.251,521,2.097,522,3.251,523,2.097,524,3.251,525,2.097,526,3.251,527,2.097,528,3.251,529,2.097,530,1.771,531,2.097]],["title/entities/Tag.html",[305,1.481,408,1.872]],["body/entities/Tag.html",[3,0.205,4,0.18,5,0.18,7,0.311,10,1.635,11,0.026,12,1.062,15,2.005,16,0.305,20,0.205,21,0.009,26,0.014,27,0.014,76,2.859,85,1.122,87,1.371,131,1.673,136,1.458,137,0.995,150,1.22,153,2.933,157,2.933,158,2.933,169,1.581,180,2.703,186,1.796,192,3.643,246,1.93,305,1.615,308,3.722,309,3.722,310,3.722,312,2.933,314,3.475,315,4.034,319,3.115,322,3.722,324,1.838,325,3.643,328,1.084,329,2.737,388,3.115,390,4.324,391,4.324,392,4.124,404,4.124,405,3.623,408,2.041,409,2.091,418,3.115,530,3.115,532,2.091,533,4.408,534,2.477,535,4.408,536,2.477,537,2.477,538,2.477,539,2.477,540,2.477,541,2.477,542,2.477,543,2.477,544,2.477]],["title/controllers/TagsController.html",[0,1.119,545,2.251]],["body/controllers/TagsController.html",[0,1.071,2,1.071,3,0.267,4,0.236,5,0.236,7,0.406,8,1.698,10,1.382,11,0.026,12,0.898,14,1.945,16,0.423,17,0.709,20,0.267,21,0.012,22,1.792,23,1.319,24,1.945,26,0.017,27,0.017,85,0.898,110,1.957,123,2.782,130,2.243,131,1.945,132,1.695,136,1.828,137,1.617,160,1.957,169,1.479,337,1.651,341,1.957,443,3.857,454,2.403,455,3.801,457,2.403,488,2.612,545,2.976,546,2.735,547,4.472,548,4.472,549,4.472,550,3.239,551,3.338,552,3.239,553,3.777,554,3.239,555,3.239,556,3.239,557,4.472,558,3.239,559,2.735,560,2.735,561,3.239,562,3.239,563,3.239,564,3.239,565,3.239,566,3.239,567,3.239]],["title/modules/TagsModule.html",[28,1.119,43,1.872]],["body/modules/TagsModule.html",[2,1.671,3,0.321,4,0.282,5,0.282,11,0.026,16,0.509,17,0.849,20,0.321,21,0.015,26,0.019,27,0.019,28,1.857,30,1.7,31,1.7,32,1.979,33,1.979,34,1.7,35,2.862,36,2.862,43,3.56,45,2.575,46,1.979,47,1.831,49,2.148,53,2.346,54,1.581,408,2.148,488,3.436,545,3.735,559,3.278,568,3.278,569,3.278,570,3.278,571,3.882,572,3.882,573,3.278,574,3.882]],["title/injectables/TagsService.html",[102,1.119,488,1.724]],["body/injectables/TagsService.html",[3,0.224,4,0.197,5,0.197,7,0.34,8,1.496,11,0.027,12,0.949,14,1.936,16,0.447,17,0.593,20,0.224,21,0.01,23,1.104,24,1.936,26,0.015,27,0.015,54,1.104,71,2.382,76,1.859,85,0.949,102,1.304,103,1.382,123,2.777,126,2.382,130,2.372,131,2.057,132,1.792,136,1.792,137,1.644,142,1.637,160,1.637,328,1.186,337,1.382,354,3.833,355,2.181,357,3.082,362,3.082,363,1.803,367,3.274,408,1.5,443,2.622,488,2.009,494,3.328,510,3.328,551,3.082,553,2.288,560,2.288,573,2.288,575,2.288,576,3.941,577,3.941,578,2.71,579,2.71,580,3.941,581,3.941,582,2.71,583,2.71,584,3.941,585,2.71,586,3.941,587,2.71,588,2.71,589,2.71,590,2.71,591,2.71,592,3.941,593,2.71,594,2.71,595,2.71,596,2.71]],["title/entities/User.html",[69,1.378,305,1.481]],["body/entities/User.html",[3,0.245,4,0.216,5,0.216,7,0.372,10,1.572,11,0.026,12,1.022,15,2.026,16,0.347,20,0.245,21,0.011,26,0.016,27,0.016,69,1.713,76,2.508,85,1.107,87,1.642,96,3.251,136,1.616,137,1.134,139,3.251,150,1.391,169,1.683,180,3.226,246,2.139,274,3.625,275,4.126,305,1.842,312,3.251,314,3.538,315,4.076,324,2.201,325,3.735,328,1.299,390,4.544,391,4.544,405,3.121,597,2.505,598,6.125,599,2.967,600,2.967,601,2.967,602,2.967,603,2.967,604,2.967,605,4.206,606,2.967,607,4.206]],["title/injectables/UserService.html",[102,1.119,128,1.595]],["body/injectables/UserService.html",[3,0.183,4,0.161,5,0.161,7,0.278,8,1.288,11,0.027,12,0.809,14,1.564,16,0.477,17,0.485,20,0.183,21,0.015,23,1.678,24,1.564,26,0.013,27,0.013,51,2.864,52,1.475,54,0.903,69,1.88,71,2.49,83,1.644,85,0.809,102,1.122,103,1.13,112,2.784,119,1.475,123,2.528,124,2.864,126,2.789,128,1.6,130,2.021,131,1.752,132,1.527,136,1.527,137,1.557,139,2.742,141,1.871,142,2.789,186,0.903,271,2.555,274,2.516,299,3.171,328,0.97,337,1.13,354,3.171,357,2.789,362,2.05,363,1.475,367,2.49,382,1.644,487,3.479,503,1.871,608,1.871,609,3.392,610,3.898,611,3.392,612,3.392,613,3.392,614,3.392,615,3.392,616,2.216,617,4.12,618,4.12,619,4.616,620,2.216,621,3.392,622,2.216,623,2.216,624,2.216,625,3.479,626,3.057,627,2.216,628,3.392,629,4.616,630,3.392,631,2.216,632,2.216,633,1.871,634,1.871,635,1.871,636,1.871,637,1.871,638,2.216,639,2.216,640,2.216,641,2.216,642,4.12,643,2.216,644,2.216,645,2.216,646,2.216,647,2.216,648,2.216,649,2.216,650,2.216,651,2.216,652,2.216,653,2.216,654,2.216,655,2.216,656,2.216]],["title/controllers/UsersController.html",[0,1.119,657,2.251]],["body/controllers/UsersController.html",[0,0.713,2,0.713,3,0.178,4,0.157,5,0.157,7,0.27,8,1.26,10,1.092,11,0.027,12,0.71,14,1.537,16,0.429,17,0.472,20,0.178,21,0.008,22,1.193,23,0.878,24,1.865,26,0.013,27,0.013,69,1.352,85,0.947,110,1.302,123,2.606,128,1.566,130,1.773,131,1.865,132,1.339,137,1.629,159,1.434,164,3.841,165,2.749,169,1.313,180,2.517,186,2.114,228,1.099,263,2.803,271,2.872,299,2.749,337,1.099,341,2.749,355,1.193,378,3.269,382,2.463,435,2.463,438,4.382,454,2.463,455,3.004,456,3.419,457,3.645,460,2.803,461,2.803,462,1.82,463,1.599,469,1.82,610,4.382,625,4.714,626,4.142,635,1.82,636,1.82,657,2.209,658,1.82,659,3.32,660,4.049,661,3.32,662,2.155,663,2.155,664,2.155,665,2.155,666,3.32,667,3.32,668,3.32,669,2.155,670,3.32,671,3.32,672,2.155,673,3.32,674,2.155,675,2.155,676,4.913,677,2.155,678,2.155,679,2.155,680,1.82,681,4.049,682,2.155,683,2.155,684,2.155,685,3.32,686,2.155,687,2.155,688,2.155,689,2.155,690,2.155,691,2.155,692,1.82,693,2.155,694,2.155,695,2.155,696,2.155,697,2.155,698,2.155,699,2.155,700,2.155,701,2.155,702,2.155,703,2.155,704,2.155,705,2.155,706,1.82,707,2.155,708,2.155]],["title/modules/UsersModule.html",[28,1.119,44,1.724]],["body/modules/UsersModule.html",[2,1.597,3,0.299,4,0.264,5,0.264,11,0.027,16,0.531,17,0.793,20,0.299,21,0.014,26,0.018,27,0.018,28,1.795,30,1.587,31,1.587,32,1.848,33,1.848,34,1.587,35,2.767,36,2.767,40,2.671,44,3.225,45,2.461,46,1.848,47,1.71,49,2.006,50,3.061,52,2.412,53,2.19,54,1.477,69,1.477,119,3.212,128,3.147,633,3.061,634,3.061,637,3.061,657,3.611,680,3.061,709,3.061,710,3.061,711,3.061,712,3.625,713,3.625,714,3.625,715,3.625,716,3.625]],["title/coverage.html",[717,3.418]],["body/coverage.html",[0,1.903,1,1.897,5,0.207,6,2.407,11,0.026,18,1.578,21,0.023,26,0.016,27,0.016,34,1.248,48,2.115,64,1.897,69,1.665,72,2.115,85,0.5,102,1.903,104,2.407,108,1.897,109,2.407,112,1.453,122,2.407,128,1.345,146,1.578,148,2.407,149,3.033,169,0.823,176,1.578,244,2.127,245,1.897,246,1.248,268,2.407,271,1.578,272,2.407,273,3.033,299,1.723,300,2.407,301,2.407,305,2.286,306,1.345,307,2.407,330,1.897,331,2.407,338,1.578,352,2.407,353,2.407,369,1.723,370,2.407,371,2.407,378,1.897,379,2.407,383,2.407,408,1.578,427,1.897,428,2.407,435,2.115,458,1.578,486,2.407,488,1.453,532,2.407,545,1.897,546,2.407,551,1.723,575,2.407,597,2.407,608,2.407,657,1.897,658,2.407,717,2.115,718,2.407,719,2.851,720,2.851,721,6.806,722,5.925,723,2.851,724,6.061,725,4.78,726,2.407,727,2.851,728,2.851,729,2.851,730,2.407,731,2.115,732,4.088,733,4.78,734,2.407,735,2.407,736,2.851,737,2.851,738,2.851,739,2.851]],["title/classes/createTagDto.html",[21,0.013,551,2.044]],["body/classes/createTagDto.html",[3,0.259,4,0.228,5,0.228,7,0.393,10,1.545,11,0.026,12,1.004,15,2.114,16,0.361,20,0.259,21,0.016,26,0.017,27,0.017,85,1.004,131,1.912,147,1.373,150,1.447,153,3.351,157,3.351,158,3.813,165,2.643,173,3.694,186,2.052,188,3.245,208,4.601,209,4.601,210,3.694,211,3.694,212,3.694,213,3.694,214,3.694,226,3.245,227,4.043,228,1.599,234,3.245,235,3.043,236,3.293,237,4.043,238,3.694,239,2.327,240,2.327,243,1.48,255,2.649,256,2.649,551,2.643,734,5.011,735,2.649,740,3.137,741,3.137,742,3.137,743,3.137,744,3.137,745,3.137,746,3.137,747,3.137,748,3.137,749,3.137]],["title/dependencies.html",[31,1.78,750,2.389]],["body/dependencies.html",[11,0.027,17,0.932,21,0.02,26,0.021,27,0.021,31,1.865,52,2.834,54,1.735,228,2.172,229,2.834,243,2.009,253,3.16,328,1.865,381,3.597,706,3.597,751,4.259,752,4.259,753,5.863,754,4.259,755,4.259,756,4.259,757,4.259,758,4.259,759,4.259,760,4.259,761,4.259,762,4.259,763,4.259,764,4.259,765,4.259,766,4.259,767,4.259,768,4.259,769,4.259,770,4.259,771,4.259,772,4.259,773,4.259]],["title/miscellaneous/enumerations.html",[774,1.565,775,3.433]],["body/miscellaneous/enumerations.html",[7,0.558,11,0.026,26,0.021,27,0.021,155,4.086,169,1.59,216,4.086,626,4.086,774,2.463,775,3.758,776,4.45,777,4.45,778,4.45,779,5.507,780,5.659,781,4.45,782,4.45,783,5.507,784,5.507,785,4.45,786,5.507,787,5.507]],["title/miscellaneous/functions.html",[774,1.565,788,3.433]],["body/miscellaneous/functions.html",[7,0.651,11,0.023,26,0.023,27,0.023,34,2.797,726,4.381,774,2.871,788,4.381,789,5.188]],["title/classes/getPostsDto.html",[21,0.013,731,2.509]],["body/classes/getPostsDto.html",[3,0.363,4,0.32,5,0.32,7,0.551,10,1.186,11,0.026,12,0.77,16,0.451,20,0.363,21,0.022,26,0.021,27,0.021,85,1.042,136,1.968,137,1.604,147,1.925,149,3.262,150,1.808,229,2.925,232,3.637,236,3.303,243,2.074,730,4.616,731,4.055,790,4.396,791,4.396]],["title/index.html",[7,0.355,792,2.829,793,2.829]],["body/index.html",[4,0.18,11,0.025,26,0.014,27,0.014,47,2.58,165,2.948,186,1.007,357,1.493,384,1.644,692,4.619,717,1.834,718,3.11,794,2.471,795,2.471,796,4.402,797,3.683,798,2.471,799,2.471,800,2.471,801,2.471,802,3.683,803,4.402,804,2.471,805,2.471,806,4.878,807,2.471,808,5.824,809,2.471,810,5.667,811,2.471,812,2.471,813,2.471,814,3.683,815,2.471,816,3.683,817,2.471,818,4.402,819,2.471,820,3.683,821,2.471,822,2.471,823,2.471,824,2.471,825,2.471,826,4.878,827,5.824,828,2.471,829,3.683,830,2.471,831,2.471,832,2.471,833,2.471,834,2.471,835,5.47,836,3.683,837,4.878,838,2.471,839,3.683,840,2.471,841,2.471,842,3.683,843,5.47,844,4.878,845,2.471,846,3.683,847,2.471,848,2.471,849,2.471,850,2.471,851,4.878,852,2.471,853,2.471,854,2.471,855,2.471,856,3.683,857,2.471,858,2.471,859,2.471,860,2.471,861,2.471,862,3.683,863,2.471,864,2.471,865,2.471,866,3.683,867,2.471,868,2.471,869,4.119,870,3.683,871,2.471,872,2.471,873,2.471,874,2.471,875,2.471,876,2.471,877,2.471,878,2.471,879,3.683,880,2.471,881,2.471,882,2.471,883,2.471,884,4.402,885,2.471,886,2.471,887,2.471,888,2.471,889,2.471,890,2.471,891,3.683,892,2.471,893,2.471,894,2.471,895,2.471,896,2.471,897,3.683,898,2.471,899,2.471,900,2.471,901,3.683,902,3.683,903,2.471,904,2.471,905,2.471,906,2.471,907,2.471,908,2.471,909,2.471,910,2.471,911,2.471,912,2.471,913,2.471,914,2.471,915,2.471,916,2.471,917,2.471,918,2.471,919,2.471,920,2.087]],["title/modules.html",[30,2.017]],["body/modules.html",[11,0.022,26,0.022,27,0.022,29,3.113,30,2.048,40,2.589,41,2.827,42,2.827,43,2.589,44,2.385,869,5.593,921,6.623,922,6.623,923,6.623]],["title/overview.html",[924,3.89]],["body/overview.html",[2,1.081,11,0.026,18,2.848,26,0.017,27,0.017,28,1.081,29,4.424,30,1.431,31,1.431,32,1.666,33,1.666,34,1.431,35,1.666,36,1.666,37,2.759,38,2.759,39,2.759,40,3.326,41,3.514,42,3.848,43,3.408,44,3.14,45,2.294,46,1.666,47,1.541,87,1.808,103,1.666,112,3.14,115,2.759,116,2.759,117,2.759,128,2.905,147,1.431,338,2.848,346,2.759,347,2.759,458,2.848,478,2.759,480,2.759,488,3.14,568,2.759,569,2.759,570,2.759,709,2.759,710,2.759,711,2.759,924,2.759,925,5.147,926,3.268,927,3.268]],["title/properties.html",[150,1.345,750,2.389]],["body/properties.html",[11,0.026,26,0.023,27,0.023,150,1.692,186,2.084,384,3.404,920,4.319,928,5.115,929,5.115,930,5.115]],["title/miscellaneous/variables.html",[774,1.565,931,3.433]],["body/miscellaneous/variables.html",[7,0.641,11,0.024,26,0.023,27,0.023,48,3.795,72,4.444,73,4.319,398,4.319,774,2.831,780,4.319,931,4.319,932,5.115]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"classes/createTagDto.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/getPostsDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":929,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":694,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":392,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":304,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":302,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["16.4.7",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["16t07:46:32+0000",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["1})@isnotempty()@isint",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":404,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.3.0",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":926,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":412,"title":{},"body":{"entities/Post.html":{}}}],["6",{"_index":925,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":927,"title":{},"body":{"overview.html":{}}}],["8.11.5",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["96",{"_index":598,"title":{},"body":{"entities/User.html":{}}}],["alice",{"_index":654,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@gmail.com",{"_index":655,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":857,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":907,"title":{},"body":{"index.html":{}}}],["another",{"_index":703,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":460,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/createTagDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":744,"title":{},"body":{"classes/createTagDto.html":{}}}],["apiproperty({description",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/createTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":746,"title":{},"body":{"classes/createTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":740,"title":{},"body":{"classes/createTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl",{"_index":742,"title":{},"body":{"classes/createTagDto.html":{}}}],["apipropertyoptional({description",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({type",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":681,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":461,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":462,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":466,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":683,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":692,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":802,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approach",{"_index":704,"title":{},"body":{"controllers/UsersController.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":354,"title":{},"body":{"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["attribute",{"_index":691,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":108,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":384,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":112,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":367,"title":{},"body":{"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":846,"title":{},"body":{"index.html":{}}}],["backers",{"_index":908,"title":{},"body":{"index.html":{}}}],["based",{"_index":841,"title":{},"body":{"index.html":{}}}],["blog",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":900,"title":{},"body":{"index.html":{}}}],["body",{"_index":341,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":923,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":921,"title":{},"body":{"modules.html":{}}}],["building",{"_index":797,"title":{},"body":{"index.html":{}}}],["business",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["cascade",{"_index":329,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":320,"title":{},"body":{"entities/MetaOption.html":{}}}],["channel",{"_index":872,"title":{},"body":{"index.html":{}}}],["character",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":835,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"classes/createTagDto.html":{},"dependencies.html":{},"classes/getPostsDto.html":{}}}],["classes",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{},"overview.html":{}}}],["clicks",{"_index":856,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":840,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":346,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":347,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":478,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":479,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":480,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":568,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":569,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":570,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":709,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":711,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":710,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":325,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":314,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":863,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":634,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":716,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["connect",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('isauth",{"_index":651,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('params",{"_index":687,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('query",{"_index":688,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('request",{"_index":708,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('this.profileconfiguration",{"_index":648,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(environment",{"_index":647,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(patchpostsdto",{"_index":474,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":616,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(metaoptionrepository",{"_index":356,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(tagrepository",{"_index":578,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["content'})@isstring()@isoptional",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":342,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":465,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":561,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":682,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":878,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":717,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":355,"title":{},"body":{"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["create(newmetaoption",{"_index":360,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(newtag",{"_index":581,"title":{},"body":{"injectables/TagsService.html":{}}}],["created",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["createdate",{"_index":308,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":310,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":365,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createdtag",{"_index":589,"title":{},"body":{"injectables/TagsService.html":{}}}],["createduser",{"_index":642,"title":{},"body":{"injectables/UserService.html":{}}}],["createmetaoptopn",{"_index":333,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptopn(@body",{"_index":344,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptopn(newmetaoption",{"_index":334,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpost",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":471,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(createdpost",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(newpost",{"_index":491,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":146,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":176,"title":{"classes/CreatePostMetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createtag",{"_index":547,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(@body",{"_index":562,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(newtag",{"_index":550,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtagdto",{"_index":551,"title":{"classes/createTagDto.html":{}},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{},"classes/createTagDto.html":{}}}],["createuser",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(newuser",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":271,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":700,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@req",{"_index":707,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconfig",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["datetime",{"_index":422,"title":{},"body":{"entities/Post.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["deeper",{"_index":874,"title":{},"body":{"index.html":{}}}],["default",{"_index":398,"title":{},"body":{"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":679,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":698,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":696,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["delete",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete('soft",{"_index":557,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":494,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":510,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":533,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":535,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":476,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetage",{"_index":548,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetage(@query('id",{"_index":564,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetage(id",{"_index":554,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":826,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":845,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":836,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":855,"title":{},"body":{"index.html":{}}}],["description",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/createTagDto.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":811,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":886,"title":{},"body":{"index.html":{}}}],["discord",{"_index":871,"title":{},"body":{"index.html":{}}}],["dive",{"_index":873,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":718,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["draft",{"_index":779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":337,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":635,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":463,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":821,"title":{},"body":{"index.html":{}}}],["each",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":396,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":798,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":833,"title":{},"body":{"index.html":{}}}],["eight",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["ensure",{"_index":831,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":890,"title":{},"body":{"index.html":{}}}],["entities",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":305,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":775,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":645,"title":{},"body":{"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"classes/createTagDto.html":{},"index.html":{}}}],["existing",{"_index":452,"title":{},"body":{"controllers/PostsController.html":{}}}],["experience",{"_index":876,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":706,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":372,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":849,"title":{},"body":{"index.html":{}}}],["featuredimageurl",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"classes/createTagDto.html":{}}}],["features",{"_index":859,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["fetched",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":851,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["find",{"_index":628,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":487,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamsdto",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(userid",{"_index":496,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":576,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":584,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["firstname",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":858,"title":{},"body":{"index.html":{}}}],["follow",{"_index":894,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":424,"title":{},"body":{"entities/Post.html":{}}}],["forwardref",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["foundtags",{"_index":592,"title":{},"body":{"injectables/TagsService.html":{}}}],["founduser",{"_index":503,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":796,"title":{},"body":{"index.html":{}}}],["full",{"_index":889,"title":{},"body":{"index.html":{}}}],["function",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":788,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":854,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":685,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":446,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":467,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":445,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsdto",{"_index":731,"title":{"classes/getPostsDto.html":{}},"body":{"coverage.html":{},"classes/getPostsDto.html":{}}}],["getting",{"_index":792,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(params",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamsdto",{"_index":299,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getusers(@param",{"_index":686,"title":{},"body":{"controllers/UsersController.html":{}}}],["grab",{"_index":689,"title":{},"body":{"controllers/UsersController.html":{}}}],["grap",{"_index":705,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":881,"title":{},"body":{"index.html":{}}}],["grow",{"_index":904,"title":{},"body":{"index.html":{}}}],["hands",{"_index":875,"title":{},"body":{"index.html":{}}}],["handy",{"_index":864,"title":{},"body":{"index.html":{}}}],["hello",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":879,"title":{},"body":{"index.html":{}}}],["here",{"_index":912,"title":{},"body":{"index.html":{}}}],["host",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://schema.org",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":917,"title":{},"body":{"index.html":{}}}],["id",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"classes/getPostsDto.html":{}}}],["id'})@isint()@isnotempty",{"_index":374,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["identifier",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":594,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/createTagDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/getPostsDto.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["information",{"_index":838,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":861,"title":{},"body":{"index.html":{}}}],["inject",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(profileconfig.key",{"_index":639,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":102,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":363,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":364,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":501,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":588,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":638,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":853,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":809,"title":{},"body":{"index.html":{}}}],["integer",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":882,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/getPostsDto.html":{}}}],["isiso8601",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/createTagDto.html":{}}}],["isnotempty",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/createTagDto.html":{}}}],["isnotempty()@isjson",{"_index":269,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["isoptional",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["isoptional()@isint()@type(undefined",{"_index":790,"title":{},"body":{"classes/getPostsDto.html":{}}}],["isoptional()@isjson",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/createTagDto.html":{}}}],["isstring()@isemail()@isnotempty()@maxlength(96",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":748,"title":{},"body":{"classes/createTagDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["items",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":897,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":899,"title":{},"body":{"index.html":{}}}],["john",{"_index":652,"title":{},"body":{"injectables/UserService.html":{}}}],["john@gmail.com",{"_index":653,"title":{},"body":{"injectables/UserService.html":{}}}],["joi",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":910,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":326,"title":{},"body":{"entities/MetaOption.html":{}}}],["jointable",{"_index":417,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":914,"title":{},"body":{"index.html":{}}}],["key",{"_index":828,"title":{},"body":{"index.html":{}}}],["keys",{"_index":425,"title":{},"body":{"entities/Post.html":{}}}],["lastname",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":867,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":391,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lettere",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["license",{"_index":920,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":902,"title":{},"body":{"index.html":{}}}],["limit",{"_index":625,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linkedin",{"_index":896,"title":{},"body":{"index.html":{}}}],["list",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{}}}],["load",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":839,"title":{},"body":{"index.html":{}}}],["loop",{"_index":892,"title":{},"body":{"index.html":{}}}],["makes",{"_index":847,"title":{},"body":{"index.html":{}}}],["managing",{"_index":860,"title":{},"body":{"index.html":{}}}],["manytomany",{"_index":418,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":409,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":419,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":385,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/createTagDto.html":{}}}],["matches(/^(?=.*[a",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"classes/createTagDto.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/getPostsDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":843,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/createTagDto.html":{}}}],["maxlength(1024",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(256",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["maxlength(512",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/createTagDto.html":{}}}],["meta",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["metadata",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":306,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoption.dto",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoption.dto.ts",{"_index":268,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["metaoption.dto.ts:6",{"_index":270,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["metaoption.entity",{"_index":350,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoption.post",{"_index":395,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionrepository",{"_index":359,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptions",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptionscontroller",{"_index":330,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":343,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":41,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":338,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minimum",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":774,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":901,"title":{},"body":{"index.html":{}}}],["mode",{"_index":814,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":837,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":423,"title":{},"body":{"entities/Post.html":{}}}],["myśliwiec",{"_index":915,"title":{},"body":{"index.html":{}}}],["name",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/createTagDto.html":{}}}],["need",{"_index":887,"title":{},"body":{"index.html":{}}}],["nest",{"_index":803,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":919,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":827,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":381,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"classes/createTagDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newmetaoption",{"_index":336,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["newpost",{"_index":493,"title":{},"body":{"injectables/PostsService.html":{}}}],["newtag",{"_index":553,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["newuser",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.email",{"_index":641,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":795,"title":{},"body":{"index.html":{}}}],["npm",{"_index":808,"title":{},"body":{"index.html":{}}}],["null",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":315,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/getPostsDto.html":{}}}],["object",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":898,"title":{},"body":{"index.html":{}}}],["official",{"_index":844,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":319,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":607,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":604,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":327,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":317,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":903,"title":{},"body":{"index.html":{}}}],["operations",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["optional",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":332,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":349,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":331,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":335,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":348,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":340,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":353,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:14",{"_index":361,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":358,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["options/metaoption.entity",{"_index":414,"title":{},"body":{"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["options/metaoption.entity.ts",{"_index":307,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["options/metaoption.entity.ts:15",{"_index":313,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:17",{"_index":316,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:19",{"_index":311,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:21",{"_index":323,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:24",{"_index":321,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/providers/meta",{"_index":352,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":924,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":750,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":626,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":454,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params",{"_index":676,"title":{},"body":{"controllers/UsersController.html":{}}}],["params.dto",{"_index":636,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":301,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:10",{"_index":303,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["parseintpipe",{"_index":455,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":888,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":376,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":373,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":380,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":456,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":450,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":369,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":522,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":526,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":513,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":516,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":528,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.schema",{"_index":524,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":518,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":520,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":514,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":702,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(body",{"_index":677,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":378,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["payload",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{}}}],["performe",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":842,"title":{},"body":{"index.html":{}}}],["please",{"_index":870,"title":{},"body":{"index.html":{}}}],["port",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":834,"title":{},"body":{"index.html":{}}}],["post",{"_index":169,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":605,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":523,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":464,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":371,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:9",{"_index":375,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.entity",{"_index":483,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":527,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":318,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":517,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":529,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":525,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":519,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":521,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":530,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":515,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["posting",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postrepository",{"_index":489,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["posts.controller",{"_index":484,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":377,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{},"classes/getPostsDto.html":{}}}],["posts.dto.ts:107",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:111",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:28",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:33",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:43",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:48",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:53",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:62",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:71",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:79",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts.dto.ts:8",{"_index":791,"title":{},"body":{"classes/getPostsDto.html":{}}}],["posts.dto.ts:88",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts/posts.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":427,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":42,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":458,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":421,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":420,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":312,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":816,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":633,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["profileconfiguration",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["progressive",{"_index":794,"title":{},"body":{"index.html":{}}}],["project",{"_index":806,"title":{},"body":{"index.html":{}}}],["properties",{"_index":150,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":339,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":459,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":559,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":680,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":457,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":695,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":697,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":868,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":911,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":825,"title":{},"body":{"index.html":{}}}],["real",{"_index":883,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":508,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":357,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":850,"title":{},"body":{"index.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":862,"title":{},"body":{"index.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"classes/createTagDto.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/getPostsDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":810,"title":{},"body":{"index.html":{}}}],["runs",{"_index":832,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":799,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"classes/createTagDto.html":{}}}],["serialize",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":787,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":800,"title":{},"body":{"index.html":{}}}],["setup",{"_index":807,"title":{},"body":{"index.html":{}}}],["shceduled",{"_index":781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["side",{"_index":801,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":852,"title":{},"body":{"index.html":{}}}],["slug",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"classes/createTagDto.html":{}}}],["small",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["softdeletetage",{"_index":549,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetage(@query('id",{"_index":566,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetage(id",{"_index":556,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":577,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":586,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{},"index.html":{}}}],["spaces",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["special",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":690,"title":{},"body":{"controllers/UsersController.html":{}}}],["sponsors",{"_index":906,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":789,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":776,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":713,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:15",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":726,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":730,"title":{},"body":{"coverage.html":{},"classes/getPostsDto.html":{}}}],["src/posts/dtos/patch",{"_index":370,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":785,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":324,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":383,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:19",{"_index":394,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:21",{"_index":413,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:28",{"_index":400,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:30",{"_index":406,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:37",{"_index":407,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:39",{"_index":389,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:41",{"_index":403,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":393,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:45",{"_index":402,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:50",{"_index":411,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:56",{"_index":397,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:62",{"_index":387,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:23",{"_index":447,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:33",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:39",{"_index":453,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:45",{"_index":444,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":481,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":486,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:12",{"_index":490,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:21",{"_index":492,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:32",{"_index":497,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:43",{"_index":495,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:48",{"_index":499,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":734,"title":{},"body":{"coverage.html":{},"classes/createTagDto.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":575,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:14",{"_index":582,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":585,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:25",{"_index":583,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:30",{"_index":587,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":579,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":415,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":532,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":539,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:17",{"_index":540,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:19",{"_index":543,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":537,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":542,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:25",{"_index":538,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:27",{"_index":534,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":544,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":536,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:33",{"_index":541,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":546,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:17",{"_index":552,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:22",{"_index":555,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:27",{"_index":558,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":482,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":571,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":300,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":379,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":608,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:29",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:42",{"_index":627,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:68",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":416,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":597,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:11",{"_index":602,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":599,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:15",{"_index":603,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:17",{"_index":606,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":601,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":600,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:52",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:66",{"_index":678,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":712,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":812,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":815,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":817,"title":{},"body":{"index.html":{}}}],["started",{"_index":793,"title":{"index.html":{}},"body":{}}],["starter",{"_index":805,"title":{},"body":{"index.html":{}}}],["statements",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":891,"title":{},"body":{"index.html":{}}}],["steps",{"_index":829,"title":{},"body":{"index.html":{}}}],["story",{"_index":786,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":848,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/createTagDto.html":{}}}],["successfully",{"_index":693,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{}}}],["succssful",{"_index":470,"title":{},"body":{"controllers/PostsController.html":{}}}],["succssful'})@post",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":469,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":869,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":922,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":408,"title":{"entities/Tag.html":{}},"body":{"entities/Post.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":560,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":735,"title":{},"body":{"coverage.html":{},"classes/createTagDto.html":{}}}],["tag.dto.ts:16",{"_index":745,"title":{},"body":{"classes/createTagDto.html":{}}}],["tag.dto.ts:25",{"_index":749,"title":{},"body":{"classes/createTagDto.html":{}}}],["tag.dto.ts:30",{"_index":741,"title":{},"body":{"classes/createTagDto.html":{}}}],["tag.dto.ts:35",{"_index":747,"title":{},"body":{"classes/createTagDto.html":{}}}],["tag.dto.ts:40",{"_index":743,"title":{},"body":{"classes/createTagDto.html":{}}}],["tag.entity",{"_index":573,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":426,"title":{},"body":{"entities/Post.html":{}}}],["tag.posts)@jointable",{"_index":410,"title":{},"body":{"entities/Post.html":{}}}],["tagrepository",{"_index":580,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":572,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/providers/tags.service",{"_index":500,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/tags.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":545,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":43,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":488,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":830,"title":{},"body":{"index.html":{}}}],["test",{"_index":820,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":823,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":822,"title":{},"body":{"index.html":{}}}],["tests",{"_index":818,"title":{},"body":{"index.html":{}}}],["text",{"_index":388,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":905,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":650,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get('info",{"_index":646,"title":{},"body":{"injectables/UserService.html":{}}}],["this.metaoptionrepository.create(newmetaoption",{"_index":366,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(createdmetaoption",{"_index":368,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionservice.create(newmetaoption",{"_index":345,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create",{"_index":505,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete(id",{"_index":509,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":507,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":512,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(createdpost",{"_index":506,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":531,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createdpost",{"_index":472,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":477,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":468,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":475,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":649,"title":{},"body":{"injectables/UserService.html":{}}}],["this.tagrepository.create(newtag",{"_index":590,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.delete(id",{"_index":595,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.find",{"_index":593,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.save(createdtag",{"_index":591,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.softdelete(id",{"_index":596,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(newtag",{"_index":563,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":565,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(newpost.tags",{"_index":502,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":511,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":567,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userrepository.create(newuser",{"_index":643,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":656,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(createduser",{"_index":644,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(1223",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(newpost.authorid",{"_index":504,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":701,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(params",{"_index":699,"title":{},"body":{"controllers/UsersController.html":{}}}],["time",{"_index":884,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":401,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["title'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["token",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":913,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"dependencies.html":{},"classes/getPostsDto.html":{}}}],["true",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@type(undefined",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":918,"title":{},"body":{"index.html":{}}}],["type",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"classes/createTagDto.html":{},"classes/getPostsDto.html":{}}}],["type'})@isnotempty",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["typeorm",{"_index":328,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":351,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":485,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":574,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":715,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["types'})@isenum(poststatus)@isnotempty",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["types'})@isenum(posttype",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["typescript",{"_index":804,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":399,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":405,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":819,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":362,"title":{},"body":{"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":930,"title":{},"body":{"properties.html":{}}}],["update",{"_index":451,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":498,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatedate",{"_index":309,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":322,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updates",{"_index":893,"title":{},"body":{"index.html":{}}}],["updatewpost",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatewpost(@body",{"_index":473,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatewpost(patchpostdto",{"_index":449,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["usefactory",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":69,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"entities/Post.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.dto",{"_index":382,"title":{},"body":{"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":637,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.posts",{"_index":386,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":448,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":617,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":610,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":714,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":657,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":128,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":44,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":684,"title":{},"body":{"controllers/UsersController.html":{}}}],["uses",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["using",{"_index":885,"title":{},"body":{"index.html":{}}}],["valid",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationschema",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/createTagDto.html":{},"dependencies.html":{},"classes/getPostsDto.html":{}}}],["value",{"_index":780,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":390,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":931,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":928,"title":{},"body":{"properties.html":{}}}],["video",{"_index":877,"title":{},"body":{"index.html":{}}}],["visit",{"_index":866,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":880,"title":{},"body":{"index.html":{}}}],["watch",{"_index":813,"title":{},"body":{"index.html":{}}}],["website",{"_index":916,"title":{},"body":{"index.html":{}}}],["without",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["working",{"_index":865,"title":{},"body":{"index.html":{}}}],["world",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":895,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":909,"title":{},"body":{"index.html":{}}}],["you're",{"_index":824,"title":{},"body":{"index.html":{}}}],["z0",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/createTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { PostsModule } from './posts/posts.module';\nimport { TagsModule } from './tags/tags.module';\nimport { UsersModule } from './users/users.module';\n\n// User created modules\n\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TagsModule,\n    MetaOptionsModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env.development'],\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n  public login(email: string, password: string, id: number) {\n    const user = this.userService.findOneById(1223);\n    return 'Sample token';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'post content', example: 'post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'image url', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'post types'})@IsEnum(PostType, {message: 'Post must be a valid post type'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'posting date', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'serialize JSON object', example: '{\n \"@Context\": \"http://schema.org\", \n \"@type\": \"Person\"\n}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example: my-url', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'slug should be all small letters and uses only '-' and without spaces, example: 'my-url''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'status types'})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'post title', description: 'this is a post title'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-posts.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { CreatePostMetaOptionDto } from 'src/meta-options/dtos/create-posts-metaOption.dto';\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { PostType } from '../enums/postType.enum';\n\nexport class CreatePostDto {\n  @ApiProperty({ example: 'post title', description: 'this is a post title' })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({ enum: PostType, description: 'post types' })\n  @IsEnum(PostType, { message: 'Post must be a valid post type' })\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({ description: 'For example: my-url', example: 'my-blog-post' })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      \"slug should be all small letters and uses only '-' and without spaces, example: 'my-url'\",\n  })\n  slug: string;\n\n  @ApiProperty({ enum: PostStatus, description: 'status types' })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  @ApiPropertyOptional({ description: 'post content', example: 'post content' })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description: 'serialize JSON object',\n    example:\n      '{\\r\\n \"@Context\": \"http://schema.org\", \\r\\n \"@type\": \"Person\"\\r\\n}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'image url',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'posting date',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'array of ids of tags',\n    example: [1, 2],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'the metaValue is a json string',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionDto)\n  metaOptions?: CreatePostMetaOptionDto | null;\n  @ApiProperty({ type: 'integer', required: true, example: 1 })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionDto.html":{"url":"classes/CreatePostMetaOptionDto.html","title":"class - CreatePostMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-posts-metaOption.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-posts-metaOption.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostMetaOptionDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight lettere at least one number one letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight lettere at least one number one letter and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get a user by ID', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-params.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUserParamsDto {\n  @ApiPropertyOptional({ description: 'Get a user by ID', example: 1234 })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/metaOption.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({ type: 'json', nullable: false })\n  metaValue: string;\n  @CreateDateColumn()\n  createDate: Date;\n  @UpdateDateColumn()\n  updateDate: Date;\n  @OneToOne(() => Post, (post) => post.metaOptions, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOptopn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOptopn\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptopn(newMetaOption: CreatePostMetaOptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newMetaOption\n                                            \n                                                            CreatePostMetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CreatePostMetaOptionDto } from './dtos/create-posts-metaOption.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { Body, Controller, Post } from '@nestjs/common';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionService: MetaOptionsService) {}\n\n  @Post()\n  public createMetaOptopn(@Body() newMetaOption: CreatePostMetaOptionDto) {\n    return this.metaOptionService.create(newMetaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './metaOption.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(newMetaOption: CreatePostMetaOptionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newMetaOption\n                                            \n                                                            CreatePostMetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../metaOption.entity';\nimport { CreatePostMetaOptionDto } from 'src/meta-options/dtos/create-posts-metaOption.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  public async create(newMetaOption: CreatePostMetaOptionDto) {\n    let createdMetaOption = this.metaOptionRepository.create(newMetaOption);\n    createdMetaOption = await this.metaOptionRepository.save(createdMetaOption);\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'post id'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-posts.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({ description: 'post id' })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishOn\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOption => metaOption.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, length: 256, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { MetaOption } from 'src/meta-options/metaOption.entity';\nimport { Tag } from 'src/tags/tag.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus } from './enums/postStatus.enum';\nimport { PostType } from './enums/postType.enum';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    nullable: false,\n    default: PostType.POST,\n  })\n  postType: PostType;\n  @Column({ type: 'varchar', nullable: false, length: 256, unique: true })\n  slug: string;\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    nullable: false,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n  @Column({ type: 'text', nullable: true })\n  content: string;\n  @Column({ type: 'text', nullable: true })\n  schema: string;\n  @Column({ type: 'varchar', nullable: true, length: 1024 })\n  featuredImageUrl: string;\n  @Column({ type: 'timestamp', nullable: true }) //datetime in mysql\n  publishOn: Date;\n\n  // Foreign Keys\n  @ManyToMany(() => Tag, (tag) => tag.posts)\n  @JoinTable()\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOption) => metaOption.post, {\n    cascade: true,\n    eager: true,\n  })\n  metaOptions?: MetaOption;\n  @ManyToOne(\n    () => User,\n    (user) => user.posts,\n    // { eager: true }\n  )\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                updatewPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createdPost: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'create a new blog post'})@ApiResponse({status: 201, description: 'you get 201 if request was succssful'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createdPost\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        updatewPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatewPost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'update an existing post'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-posts.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({ summary: 'create a new blog post' })\n  @ApiResponse({\n    status: 201,\n    description: 'you get 201 if request was succssful',\n  })\n  @Post()\n  public createPost(@Body() createdPost: CreatePostDto) {\n    return this.postsService.createPost(createdPost);\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'update an existing post' })\n  public async updatewPost(@Body() patchPostDto: PatchPostDto) {\n    // console.log(patchPostsDto);\n    return await this.postsService.update(patchPostDto);\n  }\n\n  @Delete()\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/metaOption.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { Post } from './post.entity';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, tagsService: TagsService, postRepository: Repository, metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(newPost: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newPost\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TagsService } from './../../tags/providers/tags.service';\nimport { Body, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/metaOption.entity';\nimport { UserService } from 'src/users/providers/users.service';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto } from '../dtos/create-posts.dto';\nimport { Post } from '../post.entity';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly tagsService: TagsService,\n    @InjectRepository(Post) private postRepository: Repository,\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  public async createPost(@Body() newPost: CreatePostDto) {\n    const tags = await this.tagsService.findMultipleTags(newPost.tags);\n    const foundUser = await this.userService.findOneById(newPost.authorId);\n    const createdPost = this.postRepository.create({\n      ...newPost,\n      author: foundUser,\n      tags: tags,\n    });\n    return await this.postRepository.save(createdPost);\n  }\n\n  public async findAll(userId: string) {\n    const posts = this.postRepository.find({\n      relations: {\n        metaOptions: true,\n        author: true,\n        tags: true,\n      },\n    });\n    return posts;\n  }\n\n  public async delete(id: number) {\n    await this.postRepository.delete(id);\n    return { deleted: true, id };\n  }\n\n  public async update(patchPostDto: PatchPostDto) {\n    const tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    const post = await this.postRepository.findOneBy({ id: patchPostDto.id });\n\n    patchPostDto.title = patchPostDto.title ?? post.title;\n    patchPostDto.postType = patchPostDto.postType ?? post.postType;\n    // patchPostDto.slug = patchPostDto.slug ?? post.slug;\n    patchPostDto.status = patchPostDto.status ?? post.status;\n    patchPostDto.content = patchPostDto.content ?? post.content;\n    patchPostDto.schema = patchPostDto.schema ?? post.schema;\n    patchPostDto.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    patchPostDto.publishOn = patchPostDto.publishOn ?? post.publishOn;\n\n    post.tags = tags;\n\n    return await this.postRepository.save(post);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  name: string;\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n  @Column({ type: 'text', nullable: true })\n  description: string;\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  schema: string;\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl: string;\n  @CreateDateColumn()\n  createDate: Date;\n  @UpdateDateColumn()\n  updateDate: Date;\n  @DeleteDateColumn()\n  deletedAt: Date;\n  @ManyToMany(() => Post, (post) => post.tags, { onDelete: 'CASCADE' })\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createTag\n                            \n                            \n                                    \n                                    Public\n                                deleteTage\n                            \n                            \n                                    \n                                    Public\n                                softDeleteTage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(newTag: createTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newTag\n                                            \n                                                            createTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteTage\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTage(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDeleteTage\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTage(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { TagsService } from './providers/tags.service';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Param,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { createTagDto } from './dtos/create-tag.dto';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private readonly tagsService: TagsService) {}\n  @Post()\n  public createTag(@Body() newTag: createTagDto) {\n    return this.tagsService.create(newTag);\n  }\n\n  @Delete()\n  public deleteTage(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  @Delete('soft-delete')\n  public softDeleteTage(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  providers: [TagsService],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(newTag: createTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newTag\n                                            \n                                                            createTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { In, Repository } from 'typeorm';\nimport { createTagDto } from '../dtos/create-tag.dto';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagRepository: Repository,\n  ) {}\n\n  public async create(newTag: createTagDto) {\n    const createdTag = await this.tagRepository.create(newTag);\n    return await this.tagRepository.save(createdTag);\n  }\n  public async findMultipleTags(tags: number[]) {\n    const foundTags = await this.tagRepository.find({\n      where: { id: In(tags) },\n    });\n    return foundTags;\n  }\n\n  public async delete(id: number) {\n    await this.tagRepository.delete(id);\n    return { deleted: true, id };\n  }\n\n  public async softRemove(id: number) {\n    await this.tagRepository.softDelete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  firstName: string;\n  @Column({ type: 'varchar', length: 96, nullable: true })\n  lastName: string;\n  @Column({ type: 'varchar', length: 96, nullable: false, unique: true })\n  email: string;\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  password: string;\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect users and performe business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, profileConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(newUser: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUser\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Find all users and fetch them\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Fetch a user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport profileConfig from '../config/profile.config';\nimport { GetUserParamsDto } from '../dtos/get-user-params.dto';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from './../dtos/create-user.dto';\n/**\n * Class to connect users and performe business operations\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Constructor\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // private readonly configService: ConfigService,\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n  ) {}\n\n  public async createUser(newUser: CreateUserDto) {\n    const foundUser = await this.userRepository.findOne({\n      where: { email: newUser.email },\n    });\n\n    let createdUser = this.userRepository.create(newUser);\n    createdUser = await this.userRepository.save(createdUser);\n\n    return createdUser;\n  }\n  /**\n   * Find all users and fetch them\n   */\n  public findAll(\n    getUserParamsDto: GetUserParamsDto,\n    limit: number,\n    page: number,\n  ) {\n    // const environment = this.configService.get('INFO');\n    // console.log(environment);\n    console.log('this.profileConfiguration: ', this.profileConfiguration);\n\n    const isAuth = this.authService.isAuth();\n    console.log('isAuth: ', isAuth);\n    return [\n      {\n        firstName: 'John',\n        email: 'john@gmail.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@gmail.com',\n      },\n    ];\n  }\n\n  /**\n   * Fetch a user by ID\n   */\n  public async findOneById(id: number) {\n    return await this.userRepository.findOneBy({ id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUser\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(params: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'limit of the payload', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'page number', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(body: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUserParamsDto } from './dtos/get-user-params.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UserService) {}\n  //   @Get('/:id')\n  //   public getUsers(@Param() params: any, @Query() query: any) {\n  //     console.log('params: ', params);\n  //     console.log('query: ', query);\n  //     return 'get all users request';\n  //   }\n\n  //   grab specific attribute in params or query\n  @Get('/:id')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'limit of the payload',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'page number',\n    example: 1,\n  })\n  public getUser(\n    @Param() params: GetUserParamsDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(params, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() body: PatchUserDto) {\n    return body;\n  }\n\n  //   another approach to grap the express request\n  //   @Post()\n  //   public createUsers(@Req() request: Request) {\n  //     console.log('request: ', request);\n  //     return 'create user request';\n  //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from 'src/auth/auth.module';\nimport profileConfig from './config/profile.config';\nimport { UserService } from './providers/users.service';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UserService],\n  exports: [UserService],\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    forwardRef(() => AuthModule),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-posts-metaOption.dto.ts\n            \n            class\n            CreatePostMetaOptionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/metaOption.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-posts.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-Posts.dto.ts\n            \n            class\n            getPostsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            createTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-params.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UserService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createTagDto.html":{"url":"classes/createTagDto.html","title":"class - createTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'slug should be all small letters and uses only '-' and without spaces, example: 'my-url''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n} from 'class-validator';\n\nexport class createTagDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      \"slug should be all small letters and uses only '-' and without spaces, example: 'my-url'\",\n  })\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.7\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SHCEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/getPostsDto.html":{"url":"classes/getPostsDto.html","title":"class - getPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  getPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-Posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-Posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class getPostsDto {\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
